[{"C:\\Users\\Suhas\\React\\reddit-clone\\src\\index.js":"1","C:\\Users\\Suhas\\React\\reddit-clone\\src\\reportWebVitals.js":"2","C:\\Users\\Suhas\\React\\reddit-clone\\src\\App.js":"3","C:\\Users\\Suhas\\React\\reddit-clone\\src\\router.js":"4","C:\\Users\\Suhas\\React\\reddit-clone\\src\\history.js":"5","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\home\\trendingToday\\trendingTodayComponent.js":"6","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\shared\\filter\\filterComponent.js":"7","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\searchResults\\searchTabComponent.js":"8","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\home\\trendingToday\\cardComponent.js":"9","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\shared\\detailsComponent\\detailsComponent.js":"10","C:\\Users\\Suhas\\React\\reddit-clone\\src\\header\\headerComponent.js":"11","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\searchResults\\searchResultsComponent.js":"12","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\home\\homeComponent.js":"13","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\subReddit\\subRedditComponent.js":"14"},{"size":555,"mtime":1610475981676,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":360,"mtime":1610551753239,"results":"18","hashOfConfig":"16"},{"size":838,"mtime":1610470877851,"results":"19","hashOfConfig":"16"},{"size":87,"mtime":1610149991100,"results":"20","hashOfConfig":"16"},{"size":1822,"mtime":1610552430058,"results":"21","hashOfConfig":"16"},{"size":244,"mtime":1610567392983,"results":"22","hashOfConfig":"16"},{"size":246,"mtime":1610412455532,"results":"23","hashOfConfig":"16"},{"size":2151,"mtime":1610552584565,"results":"24","hashOfConfig":"16"},{"size":12787,"mtime":1610586967648,"results":"25","hashOfConfig":"16"},{"size":6094,"mtime":1610488737203,"results":"26","hashOfConfig":"16"},{"size":443,"mtime":1610379541169,"results":"27","hashOfConfig":"16"},{"size":6238,"mtime":1610587404315,"results":"28","hashOfConfig":"16"},{"size":10100,"mtime":1610587142520,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ktz0r0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Suhas\\React\\reddit-clone\\src\\index.js",[],["60","61"],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\reportWebVitals.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\App.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\router.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\history.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\home\\trendingToday\\trendingTodayComponent.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\shared\\filter\\filterComponent.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\searchResults\\searchTabComponent.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\home\\trendingToday\\cardComponent.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\shared\\detailsComponent\\detailsComponent.js",["62"],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\header\\headerComponent.js",["63","64"],"import React, {useEffect, useState} from \"react\";\r\n\r\nimport history from \"../history\";\r\nimport RedditLogo from \"../Webp.net-resizeimage.png\";\r\n\r\nconst HeaderComponent = () => {\r\n    const [value, setValue] = useState(\"\")\r\n    useEffect(() => {\r\n        setValue(new URLSearchParams(history.location.search).get(\"q\"))\r\n    }, [new URLSearchParams(history.location.search).get(\"q\")])\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        history.push(\"/search/?q=\" + evt.target[0].value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed inset-x-0 top-0 z-10 flex items-center justify-center h-12 bg-white\">\r\n            {/* Logo */}\r\n            <div className=\"flex items-center\">\r\n                <img className=\"h-8 pl-2 cursor-pointer\" alt=\"Reddit Logo\" src={RedditLogo} onClick={() => history.push(\"/\")}></img>\r\n            </div>\r\n\r\n            {/* Search */}\r\n            <div className=\"flex items-center mx-auto\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <input className=\"bg-gray-100 border-2 rounded  w-160 hover:border-blue-500 hover:bg-white\" placeholder=\" Search\"></input>\r\n                </form>\r\n            </div>\r\n\r\n            {/* Sign up and Sign in */}\r\n            <div className=\"flex items-center\">\r\n                <button className=\"inline-block w-32 py-2 m-2 text-xs font-bold text-center text-blue-500 uppercase border focus:outline-none rounded-3xl hover:bg-blue-50\" onClick={() => history.push(\"/login\")}>Login</button>\r\n                <button className=\"inline-block w-32 py-2 m-2 text-xs font-bold text-center text-white uppercase bg-blue-500 border border-blue-500 focus:outline-none rounded-3xl hover:bg-blue-400\"  onClick={() => history.push(\"/signUp\")}>Sign Up</button>\r\n            </div>\r\n        </div>\r\n        // <div>\r\n        //     <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        //         <img src={logo} onClick={() => history.push(\"/\")}></img>\r\n\r\n        //         <Downshift onChange={downshiftOnChange} itemToString={(item) => (item ? item.title : \"\")} style={{ width: 800 }}>\r\n        //             {({ selectedItem, getInputProps, getItemProps, highlightedIndex, isOpen, inputValue, getLabelProps }) => (\r\n        //                 <div>\r\n        //                     <input\r\n        //                         {...getInputProps({\r\n        //                             placeholder: \"Search movies\",\r\n        //                             onChange: inputOnChange,\r\n        //                             // onClick: fetchMovies(\"\")\r\n        //                         })}\r\n        //                     />\r\n        //                     {isOpen ? (\r\n        //                         <div className=\"downshift-dropdown\">\r\n        //                             {movies\r\n        //                                 .filter((item) => !inputValue || item.title.toLowerCase().includes(inputValue.toLowerCase()))\r\n        //                                 .slice(0, 10)\r\n        //                                 .map((item, index) => (\r\n        //                                     <div\r\n        //                                         className=\"dropdown-item\"\r\n        //                                         {...getItemProps({ key: index, index, item })}\r\n        //                                         style={{\r\n        //                                             backgroundColor: highlightedIndex === index ? \"lightgray\" : \"white\",\r\n        //                                             fontWeight: selectedItem === item ? \"bold\" : \"normal\",\r\n        //                                         }}\r\n        //                                     >\r\n        //                                         {item.title}\r\n        //                                     </div>\r\n        //                                 ))}\r\n        //                         </div>\r\n        //                     ) : null}\r\n        //                 </div>\r\n        //             )}\r\n        //         </Downshift>\r\n\r\n        //         {/* <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        //             <Autocomplete\r\n        //                 id=\"asynchronous-demo\"\r\n        //                 style={{ width: 800 }}\r\n        //                 open={open}\r\n        //                 onInputChange={inputChanged}\r\n        //                 onOpen={() => {\r\n        //                     setOpen(true);\r\n        //                 }}\r\n        //                 // onFocus={() => {\r\n        //                 //     setOpen(true);\r\n        //                 // }}\r\n        //                 onClose={() => {\r\n        //                     console.log(\"yes\")\r\n        //                     setOpen(false);\r\n        //                 }}\r\n        //                 getOptionSelected={(option, value) => option.name === value.name}\r\n        //                 getOptionLabel={(option) => option.name}\r\n        //                 options={options}\r\n        //                 renderInput={(params) => (\r\n        //                     <TextField\r\n        //                         {...params}\r\n        //                         label=\"Search\"\r\n        //                         variant=\"outlined\"\r\n        //                         InputProps={{\r\n        //                             ...params.InputProps,\r\n        //                             endAdornment: <React.Fragment>{loading ? <CircularProgress color=\"inherit\" size={20} /> : null}</React.Fragment>,\r\n        //                         }}\r\n        //                     />\r\n        //                 )}\r\n        //             />\r\n        //         </div> */}\r\n        //         <button className=\"mr-2 btn btn-outline-primary btn-light\" type=\"button\">\r\n        //             LOG IN\r\n        //         </button>\r\n        //         <button className=\"mr-5 btn btn-primary\" type=\"button\">\r\n        //             SIGN UP\r\n        //         </button>\r\n        //     </nav>\r\n        // </div>\r\n    );\r\n};\r\n\r\nexport default HeaderComponent;\r\n","C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\searchResults\\searchResultsComponent.js",[],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\home\\homeComponent.js",["65","66"],"C:\\Users\\Suhas\\React\\reddit-clone\\src\\container\\subReddit\\subRedditComponent.js",["67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":70,"column":49,"nodeType":"75","endLine":70,"endColumn":91},{"ruleId":"76","severity":1,"message":"77","line":7,"column":12,"nodeType":"78","messageId":"79","endLine":7,"endColumn":17},{"ruleId":"80","severity":1,"message":"81","line":10,"column":9,"nodeType":"82","endLine":10,"endColumn":62},{"ruleId":"76","severity":1,"message":"83","line":7,"column":8,"nodeType":"78","messageId":"79","endLine":7,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":94,"column":61,"nodeType":"75","endLine":94,"endColumn":103},{"ruleId":"76","severity":1,"message":"83","line":12,"column":8,"nodeType":"78","messageId":"79","endLine":12,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":125,"column":21,"nodeType":"75","endLine":125,"endColumn":63},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'FilterComponent' is defined but never used.","no-global-assign","no-unsafe-negation"]